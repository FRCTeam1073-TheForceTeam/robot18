// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1073.robot18.commands;
import edu.wpi.first.wpilibj.command.Command;


import org.usfirst.frc1073.robot18.Robot;
import org.usfirst.frc1073.robot18.RobotMap;

import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.networktables.NetworkTable;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 *
 */
public class LidarAlign extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
	NetworkTable lidarSendTable;
    double lidarDegrees;
    double ultimateMeasurement;
    double robotSpeed;
    double degrees;
    double left;
    double right;
    double Inches;
    
    //Variable for button used in isFinished
    boolean isPressed = false;
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public LidarAlign() {

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
            // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

            // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        	
            // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
            requires(Robot.driveTrain);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
            
            //Sets the correct Network Table to pull from the Pixy
            lidarSendTable = NetworkTable.getTable("LidarSendTable");
        }

    protected void initialize() {
     	SmartDashboard.putString("lidar info", "init");
     	SmartDashboard.putString("hello_world", "x");
     	
    }

    protected void execute() {
    	SmartDashboard.putString("lidar info", "execute");
    	//These are the variables that get manipulated in the code

        double mmToIn = 1.0;
        SmartDashboard.putNumber("ultimateMeasurement", ultimateMeasurement);
       
        //These are the variables for speed - start slow
		
		//These are what the Pixy send us
        robotSpeed = lidarSendTable.getNumber("robotSpeed", 99);
        left = lidarSendTable.getNumber("left", 99);
        right = lidarSendTable.getNumber("right", 99);
        degrees = lidarSendTable.getNumber("degrees",99);
        SmartDashboard.putNumber("Ultimate Lidar Measurement", ultimateMeasurement);
        
        
		
		//This code modifies the speed based on how close you are to the peg
        SmartDashboard.putNumber("Lidar Distance" , ultimateMeasurement);
        SmartDashboard.putNumber("Lidar Degrees" , degrees);
        SmartDashboard.putNumber("Lidar To Inches", ultimateMeasurement/mmToIn);
        SmartDashboard.putNumber("Robot Speed", robotSpeed);
        SmartDashboard.putNumber("left", left);
        SmartDashboard.putNumber("right", right);
        
        Robot.driveTrain.basicDrive(-1*left, right);
        
        
       
         
    }
    
    protected boolean isFinished() {
    	boolean is_finished = false;
    	return is_finished;
	
    	//SmartDashboard.putString("lidar info", "isFinished");
    	
    	//Checks the cancel button for its state
    	//isPressed = Robot.oi.cancelAny.get();
    	//if (true){
    //SmartDashboard.putString("hello_world", "isFinished");
    		//return false;
    	}	
    	//else 
    	//	return true;
   // }
    
    protected void end() {
    	//Stops motors and sets bling
    	Robot.driveTrain.basicDrive(0, 0);
    	//Robot.bling.sendRemoveGear();
    }

    protected void interrupted() {
    	//Stops motors and sets bling
    	Robot.driveTrain.basicDrive(0, 0);
    	SmartDashboard.putString("lidar info", "Interrupted");
    	//Robot.bling.sendRemoveGear();
    }
}
